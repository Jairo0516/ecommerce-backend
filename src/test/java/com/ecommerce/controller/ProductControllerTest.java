package com.ecommerce.controller;

import com.ecommerce.controller.dto.ProductDTO;
import com.ecommerce.controller.dto.request.ProductRequestDTO;
import com.ecommerce.controller.dto.response.ProductResponseDTO;
import com.ecommerce.controller.dto.response.ProductsResponseDTO;
import com.ecommerce.controller.dto.response.ResponseDTO;
import com.ecommerce.controller.dto.response.StatusDTO;
import com.ecommerce.domain.service.ProductService;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;


@RunWith(MockitoJUnitRunner.class)
public class ProductControllerTest {

    private ProductDTO productDTO = new ProductDTO();

    private ProductResponseDTO productResponseDTO = new ProductResponseDTO();

    private StatusDTO statusDTO = new StatusDTO();

    private  List<ProductDTO> productDTOList = new ArrayList<>();

    private ProductRequestDTO productRequestDTO = new ProductRequestDTO();

    @Mock
    ProductService productService ;

    @InjectMocks
    ProductController productController ;

    @Before
    public void setUp() throws Exception {
        //Obj con data
        productDTO.setId(1);
        productDTO.setImage("https://picsum.photos/200/300?random=41");

        statusDTO.setCode("200");

        productResponseDTO.setStatusDTO(statusDTO);
        productResponseDTO.setProductDTO(productDTO);
        Mockito.when(productService.getProductById(1)).thenReturn(productResponseDTO);


        productDTOList.add(productDTO);
        Mockito.when(productService.getProducts()).thenReturn(ProductsResponseDTO.builder().productDTOS(productDTOList).build());


        productRequestDTO.setBase64("");
        productRequestDTO.setCount(5);
        productRequestDTO.setDescription("Producto test");
        productRequestDTO.setName("Producto test");

        Mockito.when(productService.createProduct(productRequestDTO)).thenReturn(ResponseDTO.builder().status(statusDTO).build());
        Mockito.when(productService.updateProduct(productRequestDTO)).thenReturn(ResponseDTO.builder().status(statusDTO).build());
        Mockito.when(productService.deleteProduct(productRequestDTO)).thenReturn(ResponseDTO.builder().status(statusDTO).build());

    }



    @Test
    public void getProduct() {
        ProductResponseDTO productResponseDTO1 = productController.getProduct(1);
        Assert.assertNotNull(productResponseDTO1.getProductDTO());

    }

    @Test
    public void getProducts() {
        ProductsResponseDTO productsResponseDTO = productController.getProducts();
        Assert.assertNotNull(productsResponseDTO.getProductDTOS());
    }

    @Test
    public void createProducts() {
        ResponseDTO responseDTO = productController.createProducts(productRequestDTO);
        Assert.assertNotNull(responseDTO.getStatus());
    }

    @Test
    public void updateProducts() {
        ResponseDTO responseDTO = productController.updateProducts(productRequestDTO);
        Assert.assertNotNull(responseDTO.getStatus());
    }

    @Test
    public void deleteProducts() {
        ResponseDTO responseDTO = productController.deleteProducts(productRequestDTO);
        Assert.assertNotNull(responseDTO.getStatus());
    }
}